#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

class Solution {
public:
    long findNthNumber(int n, int k) {
        long low = 0, high = static_cast<long>(1e18);
        dp.resize(2, vector<vector<Long>>(65, vector<Long>(65, -1)));
        
        while (low <= high) {
            long mid = low + (high - low) / 2;
            long count = find(mid, k);
            
            if (count >= n)
                high = mid - 1;
            else
                low = mid + 1;
        }
        
        return low;
    }

private:
    using Long = long long;
    vector<vector<vector<Long>>> dp;

    long find(long n, int k) {
        string s = bitset<64>(n).to_string();
        reset();
        return dpFunction(s, s.length(), 1, k);
    }

    long dpFunction(const string& s, int n, int tight, int k) {
        if (k < 0)
            return 0;
        if (n == 0)
            return 1;

        if (dp[tight][k][n] != -1)
            return dp[tight][k][n];

        int ub = (tight == 1 ? (s[s.length() - n] - '0') : 1);
        long ans = 0;

        for (int dig = 0; dig <= ub; dig++) {
            if (dig == ub)
                ans += dpFunction(s, n - 1, tight, k - dig);
            else
                ans += dpFunction(s, n - 1, 0, k - dig);
        }

        return dp[tight][k][n] = ans;
    }

    void reset() {
        for (int i = 0; i < 65; i++) {
            for (int j = 0; j < 65; j++) {
                dp[0][i][j] = -1;
                dp[1][i][j] = -1;
            }
        }
    }
};

int main() {
    Solution sol;
    int n = 5, k = 2;
    long result = sol.findNthNumber(n, k);
    cout << "The " << n << "th number with at most " << k << " set bits is: " << result << endl;

    return 0;
}
